import type { Provider, ProviderUserInfo } from './index'
import { createSharedComposable } from '@vueuse/core'
import { markRaw, ref } from 'vue'
import DeepSeekLoginCard from '@/components/DeepSeekLoginCard.vue'
import { useServiceStore } from '@/stores'
import { useI18n } from '../locals'

export const useDeepSeekProvider = createSharedComposable((): Provider => {
  const { t } = useI18n({
    'zh-CN': {
      providerName: 'DeepSeek',
      mainlandIdCard: '中国大陆二代居民身份证',
    },
    'en-US': {
      providerName: 'DeepSeek',
      mainlandIdCard: 'Mainland China ID Card',
    },
  })
  const { fetch } = useServiceStore()

  const user = ref<null | ProviderUserInfo>()

  return {
    id: 'deepseek',
    get name() {
      return t('providerName')
    },

    get user() {
      return user.value
    },
    async refreshUser() {
      const res = await fetch('deepseek/status', {
        method: 'GET',
      })

      if (res.ok) {
        const data = await res.json()
        if (data.code === 0 && data.data) {
          user.value = {
            name: data.data.id_profile?.name || data.data.mobile_number || 'Unknown',
            verified: !!data.data.identity_verification_id,
            phone: data.data.mobile_number,
            email: data.data.email,
            balance: undefined, // DeepSeek API doesn't return balance in user info
          }
          return
        }
      }
      user.value = null
    },

    Login: markRaw(DeepSeekLoginCard),
    async logout() {
      const res = await fetch('deepseek/logout', {
        method: 'POST',
      })

      if (!res.ok) {
        throw new Error('Logout failed')
      }
      user.value = null
    },

    verification: {
      async check() {
        const res = await fetch('deepseek/auth/info', {
          method: 'GET',
        })

        if (res.ok) {
          const data = await res.json()
          if (data.code === 0 && data.data) {
            return {
              name: data.data.name_desensitized || '',
              cardId: data.data.id_card_number_desensitized || '',
              time: undefined, // DeepSeek doesn't provide verification time
            }
          }
        }
        return null
      },

      get cardTypes() {
        return [
          { value: 1, label: t('mainlandIdCard') },
        ]
      },

      async submit(data) {
        const res = await fetch('deepseek/auth/save', {
          body: JSON.stringify({
            name: data.name.trim(),
            id: data.cardId.trim(),
          }),
          method: 'POST',
        })

        if (res.ok) {
          const responseData = await res.json()
          if (responseData.code === 0) {
            return 'success'
          }
        }
        return 'failed'
      },
    },

    payment: {
      async createWeChatPay(options) {
        // Generate a random UUID for request_id
        const requestId = crypto.randomUUID()

        const res = await fetch('deepseek/payment/create', {
          body: JSON.stringify({
            order_info: {
              payment_method_type: 'WECHAT',
              amount: options.amount,
              currency: 'CNY',
              request_id: requestId,
            },
          }),
          method: 'POST',
        })

        if (res.ok) {
          const data = await res.json()
          if (data.code === 0 && data.data) {
            return {
              orderId: data.data.payment_order_id,
              qrcUrl: data.data.url,
              qrcTimeout: 15 * 60 * 1000, // 15 minutes timeout
            }
          }
        }
        throw new Error('QR code generation failed')
      },

      async checkWeChatPay(options) {
        const res = await fetch(`deepseek/payment/status?order=${options.orderId}`, {
          method: 'GET',
        })

        if (res.ok) {
          const data = await res.json()
          if (data.code === 0 && data.data?.order) {
            const status = data.data.order.status
            if (status === 'SUCCESS') {
              return 'success'
            }
            else if (status === 'CREATED' || status === 'PENDING') {
              return 'wait'
            }
            else {
              return 'canceled'
            }
          }
        }
        throw new Error('Payment status check failed')
      },
    },

    baseURL: 'https://api.deepseek.com/v1',
    async createKey() {
      const res = await fetch('deepseek/apikey/create', {
        body: JSON.stringify({
          action: 'create',
          name: 'Generated by UniToken',
          redacted_key: null,
          created_at: null,
        }),
        method: 'POST',
      })

      if (res.ok) {
        const data = await res.json()
        if (data.code === 0 && data.data?.api_key?.sensitive_id) {
          return data.data.api_key.sensitive_id
        }
      }
      throw new Error('API Key creation failed')
    },
  }
})
